#!/usr/bin/env ruby

require 'pathname'
require 'optparse'

require_relative '../lib/metanorma/release/tool/cli/command'

options = {
  dry_run: false,
  verbose: false,
  silent: false,
  deny: false,
  create_draft_pr: true,
  branch: nil,
  gems: nil,
  org: 'metanorma',
  gems_path: Dir.pwd
}

def common_opts(opts, options)
  opts.on("--[no-]verbose", "Run verbosely") do |enabled|
    options[:verbose] = enabled
  end

  opts.on("-d", "--[no-]dry-run", "Dry-run don't modify anything") do |enabled|
    options[:dry_run] = enabled
  end

  opts.on("-y", "--yes", "Accept all interactive dialogs") do |enabled|
    options[:silent] = enabled
  end

  opts.on("-n", "--no", "Deny all interactive dialogs") do |enabled|
    options[:deny] = enabled
  end

  opts.on("-p", "--gems-path=PATH", String, "Path to directory which contains gems (gem repos)") do |root_path|
    options[:gems_path] = File.expand_path(root_path)
  end

  opts.on("-o", "--organization=ORG", String, "GitHub organization") do |org|
    options[:org] = org
  end

  opts.on("-gGEM1,GEM2,GEMN", "--gems=GEM1,GEM2,GEMN", Array, "List of gems to apply command (order make sense)") do |gems|
    options[:gems] = gems
  end
end

commands = { 
  'start' => OptionParser.new do |opts|
    opts.banner = "Create branch & draft PR on GitHub for listed gems"
    opts.separator ""
    opts.separator "Usage: mn-release start -b feature/x -g a,b,c,d"
    opts.separator ""

    common_opts opts, options

    opts.on("-bBRANCH", "--branch=BRANCH", String, "Branch to create") do |branch|
      options[:branch] = branch
    end
    opts.on("--[no-]pr", "Create draft PR") do |v|
      options[:create_draft_pr] = v
    end
  end,
  'rake' => OptionParser.new do |opts|
    opts.banner = "Run test for gems in branch"
    opts.separator ""
    opts.separator "Usage: mn-release rake -b feature/x"
    opts.separator ""

    common_opts opts, options

    opts.on("-bBRANCH", "--branch=BRANCH", String, "Branch to test") do |branch|
      options[:branch] = branch
    end
  end,
  'push' => OptionParser.new do |opts|
    opts.banner = "Push commits for gems in branch"
    opts.separator ""
    opts.separator "Usage: mn-release push -b feature/x -g a,b,c"
    opts.separator ""

    common_opts opts, options

    opts.on("-bBRANCH", "--branch=BRANCH", String, "Branch to push") do |branch|
      options[:branch] = branch
    end
  end,
  'finish' => OptionParser.new do |opts|
    opts.banner = "Merge PRs for gems in "
    opts.separator ""
    opts.separator "Usage: mn-release finish -b feature/x"
    opts.separator ""

    common_opts(opts, options)

    opts.on("-bBRANCH", "--branch=BRANCH", String, "Branch to merge PR") do |branch|
      options[:branch] = branch
    end
  end,
  'release' => OptionParser.new do |opts|
    opts.banner = "Bump version & push to git & rubygems.org"
    opts.separator ""
    opts.separator "Usage: mn-release release -g a,b,c -v minor"

    common_opts(opts, options)

    opts.on("-vVERSION", "--version=VERSION", String, "Version part to increment, accepted values: major|minor|patch|pre|release|1.2.3") do |version|
      options[:version] = version
    end
  end
}

command_name = 'mn-release'
intend_len = 3
command_len = commands.keys.map { |name| name.length }.max

banner_text = <<~BANNER
nm-release - designed to minimize routine during feature implementation/release process if that feature go through different ruby gems

Usage: #{command_name} [command] [options]

Commands

#{commands.map { |name, opts| ' '.rjust(intend_len) + name.ljust(command_len + intend_len) + opts.banner }.join("\n")}

See '#{command_name} [command] --help' for more information on a specific command.

Workflow

A typical flow will be:

 - Before start working on feature X run `mn-release start -b feature/X -g A,B,C,D`
 - Do actual development on A, B, C, D gems
 - To execute tests for these gems just run `mn-release rake -b feature/X`
   You can restrict gems with `-g` option too, by default it will run for all gems which was used on mn-release start command
 - If during development you have foundout that:
   - Some gem E need to be added to feature X, just run `mn-release start -b feature/X -g E`
   - Some gem D need to be excluded from feature X, just run `cd D/ && git branch -D feature/X`
 - To push local commits to remote repo run `mn-release push -b feature/X`
 - Once PR good enough, check list bellow, you are ready to merge with `mn-release finish -b feature/X`:
   - `mn-release rake -b feature/X` success
   - CI is green for A, B, C, D, E gems
 - To do release with version bump simply run `Usage: mn-release release -g a,b,c,d,e -v minor`

Dependencies

 - https://hub.github.com/ must be installed

Hints

 - All commands have --dry-run & --verbose modes, if you aren't sure about result of some command, try it with dry-run first
BANNER

global = OptionParser.new do |opts|
  opts.banner = banner_text
end

global.order!
command = ARGV.shift
commands[command].order!

begin
  Metanorma::Release::Tool::Cli::Command.new.send(command.gsub('-', '_'), options)
  exit 0
rescue => e
  puts "Error: #{e.message}"
  exit 1
end
